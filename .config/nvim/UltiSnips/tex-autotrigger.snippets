global !p
def is_math():
	synstack = vim.eval("map(synstack(line('.'), max([col('.') - 1, 1])), 'synIDattr(v:val, ''name'')')")
	synstack = [s for s in synstack if s.startswith(("texMath", "VimwikiEqIn"))]
	return not (synstack[-1].startswith("texMathText")) if synstack else False
endglobal

priority 1
context "is_math()"
snippet "(\d+)//" "frac: number" irA
\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

priority 1
context "is_math()"
snippet "(<.*?>)//" "frac: delimited" irA
\frac{`!p snip.rv = match.group(1)[1:-1]`}{$1}
endsnippet

priority 0
context "is_math()"
snippet // "frac" iA
\frac{${1:${VISUAL}}}{$2}
endsnippet

context "is_math()"
snippet ^^ "superscript with parenthesis" iA
^{($1)}
endsnippet

context "is_math()"
snippet __ "subscript with parenthesis" iA
_{($1)}
endsnippet

context "is_math()"
snippet p/p "partial derivative" iA
\frac{\partial ${1:${VISUAL}}}{\partial $2}
endsnippet

context "is_math()"
snippet d/d "derivative" iA
\frac{d${1:${VISUAL}}}{d$2}
endsnippet

context "is_math()"
snippet "(sum|prod)([a-zA-Z])([a-zA-Z])" "quick sum/prod" riA
\\`!p
symbol, lower, upper = match.groups()
upper = "\\infty" if upper == lower else upper
snip.rv = symbol + "_{" + lower + "=1}^" + upper
`
endsnippet

priority 1
context "is_math()"
snippet too "to infty" iA
\to\infty
endsnippet

priority 0
context "is_math()"
snippet <= "leq" iA
\leq
endsnippet

priority 0
context "is_math()"
snippet >= "geq" iA
\geq
endsnippet

context "is_math()"
snippet == "equiv" iA
\equiv
endsnippet

context "is_math()"
snippet != "neq" iA
\neq
endsnippet

context "is_math()"
snippet xx "times" iA
\times
endsnippet

context "is_math()"
snippet ~~ "sim" iA
\sim
endsnippet

context "is_math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "is_math()"
snippet +++ "cdots" iA
\cdots
endsnippet

context "is_math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "is_math()"
snippet "(\\[a-zA-Z]+|[a-zA-Z])(bar|hat|tilde)" "prefix bar/hat/tilde" rwA
`!p
if match.group(1).startswith("\\"):
	snip.rv = "\\" + match.group(2) + match.group(1)
else:
	snip.rv = "\\" + match.group(2) + "{" + match.group(1) + "}"
`
endsnippet
