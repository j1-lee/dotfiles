global !p
def create_row(snip, row = True):
	line = snip.buffer[snip.line] # read the line
	if m := re.match(r"^(\s*)(\d)?\s*$", line):
		indent, ncols = m.group(1), int(m.group(2) or 0)
		if ncols == 0: # if ncols not given, try detecting it
			ncols = 1
			break_strings = (r"\begin{",
							 r"\end{")
			for i in range(snip.line - 1, -1, -1):
				line = snip.buffer[i]
				if ndelims := re.findall(r"(?<!\\)&", line):
					ncols = len(ndelims) + 1
					break
				elif m := re.search(r"\\begin{tabular}{(.*?)}", line):
					ncols = max(len(re.findall(r"[lcr]", m.group(1))), 1)
					break
				elif any(s in line for s in break_strings): # break at boundary
					break

		placeholders = list(range(1, ncols)) + [0]
		delim = " & " if row else  r" \\\\ " # if !row, then column mode
		anon_snippet_body = delim.join("$" + str(x) for x in placeholders)

		snip.buffer[snip.line] = "" # clear the current line
		snip.expand_anon(indent + anon_snippet_body)
endglobal

post_jump "snip.cursor.preserve(); create_row(snip)"
snippet "mat(\d)?" "bmatrix (with # of cols)" rb
\begin{bmatrix}
	`!p snip.rv = match.group(1) or ""`$0
\end{bmatrix}
endsnippet

post_jump "if snip.tabstop == 0: snip.cursor.preserve(); create_row(snip)"
snippet "tab(\d)?" "tabular (with # of cols)" rb
\begin{tabular}{${1:`!p snip.rv = "c" * int(match.group(1) or 0)`}}
	\toprule
	$0
	\bottomrule
\end{tabular}
endsnippet

post_jump "create_row(snip)"
snippet "row(\d)?" "row (with # of cols)" rb
`!p snip.rv = match.group(1) or ""`
endsnippet

post_jump "create_row(snip)"
snippet \\ "next row" i
\\\\
$0
endsnippet

post_jump "create_row(snip, False)"
snippet "vec(\d)?" "vector" rb
\begin{bmatrix}
	`!p snip.rv = match.group(1) or ""`$0
\end{bmatrix}
endsnippet

snippet "vec<(.*?)>" "vector (with elements)" rb
\begin{bmatrix}
	`!p
elements = [x.strip() for x in match.group(1).split(",") if x.strip() != ""]
snip.rv = " \\\\ ".join(elements)
`
\end{bmatrix}
endsnippet

snippet "mat<(.*?)>" "matrix [with elements]" rb
\begin{bmatrix}
`!p
snip.shift()
rows = [[elem.strip() for elem in row.split(",")] for row in match.group(1).split(";")]
ncols = max(len(row) for row in rows)
for r in range(len(rows)):
	row = rows[r]
	row.extend([""] * (ncols - len(row)))
	snip.rv += snip.mkline(" & ".join(row))
	if r < len(rows) - 1:
		snip.rv += "\\\\\n"
`
\end{bmatrix}
endsnippet
